what is maven 
its a project management tool 
1.compile 
2.Run Test
3.Packing jar/ Packing war
4.Deploy to Server

maven use convention over configuration

project structure 

myproject (base project)
    |
    |-src/main/java  (source code)
    |-src/main/resource (properties file , xml configuration)
    |-src/test/java (unit and integration file)
    |-src/test/resource (properties file , xml configuration used for testing)


mvn install
compile    will compile the source code present in  src/main/java
run        will run Test cases present in src/test/java
package    if they test pass it will bundle into jar(if it is a standalone application) or war(if it is a web application)
deploy 


folder structure can change as per the project nature 
these folder structure are auto created by maven based on the archetype we select 
                    _____ standalone alone
                    |
                    |
Archetype types --------- web application
                    |
                    |____ EAR

why maven

    common interface
    before maven when working with different project each developer need to understand building
    tools and practices followed by each in each different project which is time consuming but using
    maven we can easily run any project using maven install comand alone 

    its not only build tool also dependency manager will add other jar files to this project which is required
    supports both open source dependency and private dependency


Reuse
    Plugin Model is used by Maven which helps in reuse 
    it wont download again and again it will reuse the jar across the projects


mvn archetype:generate -DgroupId=com.hdmdmi -DartifactId=hellomaven -DarchetypeArtifactId
tId=maven-archetype-quickstart -DinteractiveMode=false

mvn                     -- maven command
archetype:generate      -- maven goal
-DartifactId            -- project name
-DarchetypeArtifactId   -- templet which needs to be followed(maven-archetype-quickstart is a java standalone project templete)
-DinteractiveMode       -- if it is true means we need to type DartifactId,DarchetypeArtifactId,DgroupId in
                           interactive way if it is false we can pass that in parameter

pom.xml

-------------------------------------------|
groupId     -company domain(com.hdmdmi)    |
artifactId  -project name(hellomaven)      |  This are called maven project coordinates
packaging   -jar/war/ear                   |
version     -version of the project(1.x)   |
--------------------------------------------
name        -user friendly name
url         -company website/person who own this project website
dependencies-is where we add required dependency to project


if we get any error while build the maven project like target option 5 is no
longer supported specify this in pom.xml

<properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
</properties>



Two key concepts of maven 
    1.Maven Plugin
    2.Maven Goals

maven Plugin is a collection of one or more goal

eg:-
    archetype:generate
archetype is a Plugin and generate is a goal from that Plugin
    install:install
install is a Plugin and install is a goal from that Plugin


goal can be a be a specify task it is usally run independently or can be a part of a complex build


goal can take parameter they will also have default parameter
for example

pluginId:goalId

mvn archetype:generate -DgroupId=com.hdmdmi -DartifactId=hellomaven -DarchetypeArtifactId
tId=maven-archetype-quickstart -DinteractiveMode=false

mvn                     -- maven command

list of parameter
archetype:generate      -- maven goal
-DartifactId            -- project name
-DarchetypeArtifactId   -- templet which needs to be followed(maven-archetype-quickstart is a java standalone project templete)
-DinteractiveMode       -- if it is true means we need to type DartifactId,DarchetypeArtifactId,DgroupId in
                           interactive way if it is false we can pass that in parameter

by default maven doesnt know how to compile build pack project it uses the 
plugin to perform the action

every default maven project get these set of plugin from the parent but we can overwrite by defining in our pom.xml


Maven Phases and Goals

mvn install will run 
    -process-resource
        -compile
            -test
                -package

we no need to run these steps one by one for example if i run mvn test this will make sure the
phase present above that is runned before this

mvn test will run
        -process-resource
            -compile
                -test


each phase is associate with one or more goal

we can also give goal with mvn 
for example mvn surefire:test which is present in test phase 
this will run all the phase present above this goal phase


the maven coordinates will use groupId,artifactId,packaging,version
To locate the project in maven repository groupId:artifactId:packaging:version


maven will download the dependencies from the central library https://repo.maven.apache.org/maven2/


we can also create an enterprise repository which will have both open source 
and orginisation specify jar

so that teams present in the company can use this enterprise repository


maven will also create local repository so that it wont download every time 
for mac /Users/ajaylee/.m2/repository/log4j/log4j/1.2.12

maven will also include our project in local repository 
hellomaven is the project which we create
/Users/ajaylee/.m2/repository/com/hdmdmi/hellomaven/1.0-SNAPSHOT



=======================================Day 2==============================

product web application 
    -- create product
    -- display product 

this project  consist of 
1.web layer
2.business layer
3.dao layer (data access layer)

tool going to be added 
servelets 
pojo(plain old java object)
spring 


we can implement this project as a standalone java project

we can create business logic layer 
            productBO
            productBOImpl
data access layer
            productDAO
            productDAOImpl
                -create
                -read
                -update
                -delete


unit test

create productweb  -- war package

1.createProductServlet
2.displayProductServlet



we can create business logic layer 
            productBO
            productBOImpl
data access layer
            productDAO
            productDAOImpl


add the productservice project as an dependencies to productweb application





to change the java compiler version add configuration properties inside the maven compile plugin
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>



We should add the Test inside the productservices/src/test/java/com/hdmdmi/ 
as per the package structure present in the main


starting from junit 4 it is easy to write test case just add @Test annotation before the method

import the following package

import org.junit.Test;

import static org.junit.Assert.*;

write the test cases


if we want to skip the test use this command 
mvn install -DskipTests





================================================Day 3===============================================


Maven scope 

There are 6 scope present in maven 

1. Compile 
2. Runtime 
3. Provided 
4. Test
5. System 
6. Import



Compile will be available during build , test ,run this is the default scope 
Provided are required only during  run and  test but they no need to be a deployed example servlet api is required during building web application but deploying war doesn't required because tomcat already have that
Runtime only during running the test and running the application not required during compiling 
Test only required for compile test and running the test (JUnit)
System scope rarely used when we want to add a dependency which is not in maven repository we need to specify the path inside the system scope 
Import This are used in pom based projects not in jar and war 



In a big organisation they will be different project with same dependency but sometimes with different versions which can cause problem to avoid this we can use the parent .pom 


Add dependencyManagement tag inside the project tag and add the dependency with required version in that parent .pom so that all the child and parent will always use this version and we no need to use the version tag in child projects


.pom (Parent)

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


.pom (Child)

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>



Even if we add dependency Management in parent pom we need to add the dependency in the child project only version we are not supposed to add rest of the things are added as before 

If we specify the version in child .pom then this version is override 






Plugin Management this is similar dependency Management tag this will allow us to use the same plugin version and the same configuration across the child project and parent project

Add a build tag place the plugin management inside the build tag and the plugins tag inside the plugin management tag and add the plugin with the required version and configuration here I have added java 1.8 as the require source and target versions as a configuration for the compiler plugin version 3.8.0 this same configuration will be used for the parent and child projects with the same version 

Parent .pom


	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.0</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>







Build Portability achieved using Profiles 

Create a source folder(folder which is added to the class path is called source folder) named profiles then add 3 sub folder dev , test , prod 

Create an application.properites file in each sub folder with respective values example db.url=devurl in dev/application.properties file and db.url=produrl in prod/application.properties file



After creating all the files go back to .pom file 


Add profiles tag inside profiles tag add profile tag 



Profile tag has a property id which is unique and used in mvn command to activate the profile eg <id>dev</id> , <id>prod</id> , <id>test</id>


 
Now add the <properties> tag inside that add <build.profile.id>dev</build.profile.id> here the dev is the folder name if there is a different folder name is there change it as per the folder name 

Now add a build tag in the profile tag and add resources tag and add resource tag inside that tag now add directory tag inside resource and provide the path of the folder



	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<build.profile.id>dev</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/profiles/dev</directory>
					</resource>
				</resources>
			</build>
		</profile>

		<profile>
			<id>test</id>
			<properties>
				<build.profile.id>test</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/profiles/test</directory>
					</resource>

				</resources>

			</build>
		</profile>


		<profile>
			<id>prod</id>
			<properties>
				<build.profile.id>prod</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/profiles/prod</directory>
					</resource>

				</resources>

			</build>
		</profile>


	</profiles>




To activate the profile we can use the common mvn install -Pdev, mvn install -Ptest , mvn install -Pprod


In eclipse right click the project select properties search maven in profile give the profile value   




 
